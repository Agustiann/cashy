features/financial_report/data/datasources/report_remote_datasource.dart
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:cashy/features/financial_report/data/models/report_model.dart';

class ReportRemoteDatasource {
  final SupabaseClient supabaseClient;

  ReportRemoteDatasource(this.supabaseClient);

  Future<List<ReportModel>> getMonthlyReport(String month, String year) async {
    final intMonth = int.parse(month);
    final intYear = int.parse(year);

    final startDate = DateTime(intYear, intMonth, 1);
    final endDate = DateTime(intYear, intMonth + 1, 1);

    final response = await supabaseClient
        .from('transactions')
        .select('amount, type, category, date')
        .gte('date', startDate.toIso8601String())
        .lt('date', endDate.toIso8601String())
        .order('date', ascending: true)
        .limit(100);

    final data = response as List<dynamic>?;

    if (data == null || data.isEmpty) {
      return [];
    }

    return data
        .map((item) => ReportModel.fromJson(item as Map<String, dynamic>))
        .toList();
  }

  Future<List<ReportModel>> getYearlyReport(String year) async {
    final intYear = int.parse(year);

    final startDate = DateTime(intYear, 1, 1);
    final endDate = DateTime(intYear + 1, 1, 1);

    final response = await supabaseClient
        .from('transactions')
        .select('amount, type, category, date')
        .gte('date', startDate.toIso8601String())
        .lt('date', endDate.toIso8601String())
        .order('date', ascending: true)
        .limit(100);

    final data = response as List<dynamic>?;

    if (data == null || data.isEmpty) {
      return [];
    }

    return data
        .map((item) => ReportModel.fromJson(item as Map<String, dynamic>))
        .toList();
  }

  Future<List<ReportModel>> getReportsThisYearUntilNow() async {
    final now = DateTime.now();
    final startDate = DateTime(now.year, 1, 1);
    final endDate = DateTime(now.year, now.month + 1, 1);

    final response = await supabaseClient
        .from('transactions')
        .select('amount, type, category, date')
        .gte('date', startDate.toIso8601String())
        .lt('date', endDate.toIso8601String())
        .order('date', ascending: true)
        .limit(1000);

    final data = response as List<dynamic>?;

    if (data == null || data.isEmpty) {
      return [];
    }

    return data
        .map((item) => ReportModel.fromJson(item as Map<String, dynamic>))
        .toList();
  }
}

features/financial_report/data/models/report_model.dart
class ReportModel {
  final double amount;
  final String type;
  final String category;
  final DateTime date;

  ReportModel({
    required this.amount,
    required this.type,
    required this.category,
    required this.date,
  });

  factory ReportModel.fromJson(Map<String, dynamic> json) {
    return ReportModel(
      amount: json['amount']?.toDouble() ?? 0.0,
      type: json['type'] ?? '',
      category: json['category'] ?? '',
      date: DateTime.parse(json['date']),
    );
  }
}

features/financial_report/data/repositories/report_repository_impl.dart
import 'package:cashy/features/financial_report/data/datasources/report_remote_datasource.dart';
import 'package:cashy/features/financial_report/domain/entities/report_entity.dart';
import 'package:cashy/features/financial_report/domain/repositories/report_repository.dart';

class ReportRepositoryImpl implements ReportRepository {
  final ReportRemoteDatasource remoteDatasource;

  ReportRepositoryImpl(this.remoteDatasource);

  @override
  Future<List<ReportEntity>> getMonthlyReport(String month, String year) async {
    final reportModels = await remoteDatasource.getMonthlyReport(month, year);
    return reportModels.map((model) => ReportEntity.fromModel(model)).toList();
  }

  @override
  Future<List<ReportEntity>> getYearlyReport(String year) async {
    final reportModels = await remoteDatasource.getYearlyReport(year);
    return reportModels.map((model) => ReportEntity.fromModel(model)).toList();
  }

  @override
  Future<List<ReportEntity>> getReportsThisYearUntilNow() async {
    final reportModels = await remoteDatasource.getReportsThisYearUntilNow();
    return reportModels.map((model) => ReportEntity.fromModel(model)).toList();
  }
}

features/financial_report/domain/entities/report_entity.dart
import 'package:cashy/features/financial_report/data/models/report_model.dart';

class ReportEntity {
  final double totalIncome;
  final double totalExpense;
  final DateTime date;

  ReportEntity({
    required this.date,
    required this.totalIncome,
    required this.totalExpense,
  });

  factory ReportEntity.fromModel(ReportModel model) {
    return ReportEntity(
      date: model.date, 
      totalIncome: model.type == 'income' ? model.amount : 0.0,
      totalExpense: model.type == 'expense' ? model.amount : 0.0,
    );
  }
}

features/financial_report/domain/repositories/report_repository.dart
import 'package:cashy/features/financial_report/domain/entities/report_entity.dart';

abstract class ReportRepository {
  Future<List<ReportEntity>> getMonthlyReport(String month, String year);
  Future<List<ReportEntity>> getYearlyReport(String year);
  Future<List<ReportEntity>> getReportsThisYearUntilNow();
}

features/financial_report/domain/usecases/report_usecase.dart
import 'package:cashy/features/financial_report/domain/entities/report_entity.dart';
import 'package:cashy/features/financial_report/domain/repositories/report_repository.dart';

class ReportUseCase {
  final ReportRepository repository;

  ReportUseCase(this.repository);

  Future<List<ReportEntity>> getMonthlyReport(String month, String year) {
    return repository.getMonthlyReport(month, year);
  }

  Future<List<ReportEntity>> getYearlyReport(String year) {
    return repository.getYearlyReport(year);
  }

  Future<List<ReportEntity>> getReportsThisYearUntilNow() {
    return repository.getReportsThisYearUntilNow();
  }
}

features/financial_report/presentation/bloc/report_bloc.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:cashy/features/financial_report/domain/usecases/report_usecase.dart';
import 'package:cashy/features/financial_report/presentation/bloc/report_event.dart';
import 'package:cashy/features/financial_report/presentation/bloc/report_state.dart';

class ReportBloc extends Bloc<ReportEvent, ReportState> {
  final ReportUseCase reportUseCase;

  ReportBloc(this.reportUseCase) : super(ReportInitial()) {
    on<FetchMonthlyReport>(_onFetchMonthlyReport);
    on<FetchYearlyReport>(_onFetchYearlyReport);
    on<FetchReportsThisYearUntilNow>(_onFetchReportsThisYearUntilNow);
  }

  Future<void> _onFetchMonthlyReport(
      FetchMonthlyReport event, Emitter<ReportState> emit) async {
    emit(ReportLoading());
    try {
      final report =
          await reportUseCase.getMonthlyReport(event.month, event.year);
      emit(ReportLoaded(report));
    } catch (e) {
      emit(ReportError('Failed to load monthly report'));
    }
  }

  Future<void> _onFetchYearlyReport(
      FetchYearlyReport event, Emitter<ReportState> emit) async {
    emit(ReportLoading());
    try {
      final report = await reportUseCase.getYearlyReport(event.year);
      emit(ReportLoaded(report));
    } catch (e) {
      emit(ReportError('Failed to load yearly report'));
    }
  }

  Future<void> _onFetchReportsThisYearUntilNow(
      FetchReportsThisYearUntilNow event, Emitter<ReportState> emit) async {
    emit(ReportLoading());
    try {
      final report = await reportUseCase.getReportsThisYearUntilNow();
      emit(ReportLoaded(report));
    } catch (e) {
      emit(ReportError('Failed to load partial-year report'));
    }
  }
}

features/financial_report/presentation/bloc/report_event.dart
abstract class ReportEvent {}

class FetchMonthlyReport extends ReportEvent {
  final String month;
  final String year;

  FetchMonthlyReport(this.month, this.year);
}

class FetchYearlyReport extends ReportEvent {
  final String year;

  FetchYearlyReport(this.year);
}

class FetchReportsThisYearUntilNow extends ReportEvent {}


features/financial_report/presentation/bloc/report_state.dart
import 'package:cashy/features/financial_report/domain/entities/report_entity.dart';

abstract class ReportState {}

class ReportInitial extends ReportState {}

class ReportLoading extends ReportState {}

class ReportLoaded extends ReportState {
  final List<ReportEntity> report;

  ReportLoaded(this.report);
}

class ReportError extends ReportState {
  final String message;

  ReportError(this.message);
}


features/financial_report/presentation/screens/report_page.dart
import 'package:cashy/features/financial_report/presentation/bloc/report_bloc.dart';
import 'package:cashy/features/financial_report/presentation/bloc/report_event.dart';
import 'package:cashy/features/financial_report/presentation/bloc/report_state.dart';
import 'package:cashy/features/financial_report/presentation/widgets/report_download.dart';
import 'package:cashy/features/financial_report/presentation/widgets/date_utils.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class ReportPage extends StatefulWidget {
  const ReportPage({super.key});

  @override
  State<ReportPage> createState() => _ReportPageState();
}

class _ReportPageState extends State<ReportPage> {
  bool isMonthlySelected = true;
  late List<String> months;
  late List<String> years;
  String selectedPeriod = '';
  final List<String> exportCategories = ['Semua Kategori'];

  final List<String> exportFormats = ['XLS'];

  final Map<int, String> monthMap = {
    1: 'Jan',
    2: 'Feb',
    3: 'Mar',
    4: 'Apr',
    5: 'Mei',
    6: 'Jun',
    7: 'Jul',
    8: 'Agu',
    9: 'Sep',
    10: 'Okt',
    11: 'Nov',
    12: 'Des',
  };

  List<String> getMonthsUntilNow() {
    final now = DateTime.now();
    return List.generate(now.month, (i) => monthMap[now.month - i]!);
  }

  @override
  void initState() {
    super.initState();
    months = getMonthsUntilNow();
    years = getYears();
    selectedPeriod = months.first;

    context.read<ReportBloc>().add(FetchReportsThisYearUntilNow()); // fetch initial
  }

  void _showExportBottomSheet(BuildContext context) {
    showModalBottomSheet(
      context: context,
      builder: (context) {
        return ReportDownload(
          onExport: () {
            // Implement export sesuai kebutuhan
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.blue,
        title: const Text(
          'Laporan Keuangan',
          style: TextStyle(color: Colors.white),
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.download, color: Colors.white),
            onPressed: () {
              _showExportBottomSheet(context);
            },
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Row(
              children: [
                Expanded(
                    child: GestureDetector(
                        onTap: () {
                          setState(() {
                            isMonthlySelected = true;
                            months = getMonthsUntilNow();
                            selectedPeriod = months.first;
                          });
                          context
                              .read<ReportBloc>()
                              .add(FetchReportsThisYearUntilNow()); // refresh
                        },
                        child: Container(
                          height: 40,
                          decoration: BoxDecoration(
                            color:
                                isMonthlySelected ? Colors.green : Colors.white,
                            borderRadius: const BorderRadius.horizontal(
                                left: Radius.circular(8)),
                            boxShadow: [
                             if (!isMonthlySelected)
                                BoxShadow(
                                  color: Colors.grey.withAlpha(77),
                                  offset: const Offset(0, 2),
                                  blurRadius: 4,
                                ),
                            ],
                          ),
                          child: Center(
                            child: Text(
                                'Bulanan',
                                style: TextStyle(
                                  color: isMonthlySelected
                                      ? Colors.white
                                      : Colors.black,
                                  fontWeight: FontWeight.bold,
                                )),
                          ),
                        ))),
                Expanded(
                    child: GestureDetector(
                        onTap: () {
                          setState(() {
                            isMonthlySelected = false;
                            years = getYears();
                            selectedPeriod = years.first;
                          });
                          context
                              .read<ReportBloc>()
                              .add(FetchYearlyReport(selectedPeriod)); // refresh
                        },
                        child: Container(
                          height: 40,
                          decoration: BoxDecoration(
                            color:
                                !isMonthlySelected ? Colors.green : Colors.white,
                            borderRadius: const BorderRadius.horizontal(
                                right: Radius.circular(8)),
                            boxShadow: [
                             if (isMonthlySelected)
                                BoxShadow(
                                  color: Colors.grey.withAlpha(77),
                                  offset: const Offset(0, 2),
                                  blurRadius: 4,
                                ),
                            ],
                          ),
                          child: Center(
                            child: Text('Tahunan',
                                style: TextStyle(
                                  color: !isMonthlySelected
                                      ? Colors.white
                                      : Colors.black,
                                  fontWeight: FontWeight.bold,
                                )),
                          ),
                        ))),
              ],
            ),
            const SizedBox(height: 20),
            Expanded(
              child: BlocBuilder<ReportBloc, ReportState>(
                builder: (context, state) {
                    if (state is ReportLoading) {
                    return const Center(
                        child: CircularProgressIndicator()); 
                    } else if (state is ReportError) {
                    return Center(child: Text(state.message)); 
                    } else if (state is ReportLoaded) {
                    final report = state.report;

                    final monthlyData = <String, Map<String, double>>{};
                    for (var entry in report) {
                      final monthKey = monthMap[entry.date.month]!;
                      monthlyData[monthKey] ??= {
                        'income': 0.0,
                        'expense': 0.0
                      };
                      monthlyData[monthKey]!['income'] = 
                         (monthlyData[monthKey]!['income']! + entry.totalIncome);
                      monthlyData[monthKey]!['expense'] = 
                         (monthlyData[monthKey]!['expense']! + entry.totalExpense);
                    }

                    final displayList = isMonthlySelected ? months : years;

                    return ListView.builder(
                      itemCount: displayList.length,
                      itemBuilder: (context, index) {
                        final item = displayList[index];
                        final isSelected = item == selectedPeriod;

                        final income = isMonthlySelected
                            ? (monthlyData[item]?['income'] ?? 0.0)
                            : report
                                .fold(0.0, (sum, r) => sum + r.totalIncome);
                        final expense = isMonthlySelected
                            ? (monthlyData[item]?['expense'] ?? 0.0)
                            : report
                                .fold(0.0, (sum, r) => sum + r.totalExpense);

                        return GestureDetector(
                          onTap: () {
                            setState(() {
                              selectedPeriod = item;
                            });
                          },
                          child: Card(
                            color: Colors.white,
                            elevation: 4,
                            margin: const EdgeInsets.symmetric(vertical: 6),
                            child: Padding(
                                padding: const EdgeInsets.symmetric(
                                   vertical: 12, horizontal: 16),
                                child: Row(
                                  children: [
                                   Container(
                                      width: 60,
                                      padding: const EdgeInsets.symmetric(
                                         vertical: 6, horizontal: 10),
                                      decoration: BoxDecoration(
                                      color: isSelected
                                         ? Colors.orange
                                         : Colors.grey.shade400,
                                      borderRadius: BorderRadius.circular(6),
                                      ),
                                      alignment: Alignment.center,
                                      child: Text(item,
                                         style: const TextStyle(
                                             color: Colors.white,
                                             fontWeight: FontWeight.bold))),
                                   const SizedBox(width: 20),
                                   Container(
                                      width: 110,
                                      child: Text(
                                         'Rp. ${income.toStringAsFixed(0)}',
                                         textAlign: TextAlign.left,
                                         style: const TextStyle(
                                             color: Colors.green,
                                             fontWeight: FontWeight.w600),
                                      ),
                                   ),
                                   const SizedBox(width: 20),
                                   Container(
                                      width: 110,
                                      child: Text(
                                         'Rp. ${expense.toStringAsFixed(0)}',
                                         textAlign: TextAlign.left,
                                         style: const TextStyle(
                                             color: Colors.red,
                                             fontWeight: FontWeight.w600),
                                      ),
                                   ),
                                  ],
                                )),
                          ),
                        );
                      },
                    );
                    }
                    return const SizedBox();
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}


features/financial_report/presentation/widgets/date_utils.dart
List<String> getYears({int startYear = 2025}) {
  final now = DateTime.now();
  int currentYear = now.year;
  return List.generate(currentYear - startYear + 1, (index) => (startYear + index).toString());
}

features/financial_report/presentation/widgets/report_download.dart
import 'package:flutter/material.dart';

class ReportDownload extends StatelessWidget {
  const ReportDownload({super.key, this.onExport});

  final VoidCallback? onExport;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.grey.shade800,
              borderRadius: BorderRadius.circular(10),
            ),
            child: Center(
              child: Text(
                'EKSPOR',
                style: TextStyle(
                    color: Colors.white, fontWeight: FontWeight.bold),
              ),
            ),
          ),
          TextField(
            decoration: InputDecoration(
              labelText: 'Judul',
            ),
          ),
          TextField(
            decoration: InputDecoration(
              labelText: 'Dari Tanggal',
            ),
            controller: TextEditingController(text: '01 Jun 2025'),
          ),
          TextField(
            decoration: InputDecoration(
              labelText: 'Sampai Tanggal',
            ),
            controller: TextEditingController(text: '30 Jun 2025'),
          ),
          DropdownButtonFormField<String>(
            decoration: InputDecoration(
              labelText: 'Tipe',
            ),
            items: ['Semua tipe','Pemasukan', 'Pengeluaran'].map((item) {
              return DropdownMenuItem(
                value: item,
                child: Text(item),
              );
            }).toList(), 
            onChanged: (val) {},
          ),
          DropdownButtonFormField<String>(
            decoration: InputDecoration(
              labelText: 'Format',
            ),
            items: ['XLS','PDF','CSV'].map((item) {
              return DropdownMenuItem(
                value: item,
                child: Text(item),
              );
            }).toList(), 
            onChanged: (val) {},
          ),
          const SizedBox(height: 20),
          Row(
            children: [
              Expanded(
                child: ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red,
                    ),
                    onPressed: () {
                      Navigator.pop(context);
                    },
                    child: Text('BATAL', style: TextStyle(
                    color: Colors.white),)),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                    ),
                    onPressed: onExport ??
                        () {
                        },
                    child: Text('EKSPOR', style: TextStyle(
                    color: Colors.white),)),
              ),
            ],
          )
        ],
      ),
    );
  }
}

lib/main.dart
import 'package:cashy/features/category/domain/usecases/category_usecases.dart';
import 'package:cashy/features/category/domain/usecases/delete_category.dart';
import 'package:cashy/features/category/domain/usecases/update_category.dart';
import 'package:cashy/features/financial_report/data/datasources/report_remote_datasource.dart';
import 'package:cashy/features/financial_report/data/repositories/report_repository_impl.dart';
import 'package:cashy/features/financial_report/domain/usecases/report_usecase.dart';
import 'package:cashy/features/financial_report/presentation/bloc/report_bloc.dart';
import 'package:cashy/features/pos/data/datasources/pos_remote_datasource.dart';
import 'package:cashy/features/pos/data/repositories/pos_repository_impl.dart';
import 'package:cashy/features/pos/domain/usecases/pos_usecase.dart';
import 'package:cashy/features/pos/presentation/bloc/pos_bloc.dart';
import 'package:cashy/features/transaction/data/datasources/transaction_remote_datasource.dart';
import 'package:cashy/features/transaction/data/repositories/transaction_repository_impl.dart';
import 'package:cashy/features/transaction/domain/usecases/transaction_usecases.dart';
import 'package:cashy/features/transaction/presentation/bloc/transaction_bloc.dart';
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import 'features/auth/presentation/bloc/auth_bloc.dart';
import 'features/auth/data/datasources/auth_remote_datasource.dart';
import 'features/auth/data/repositories/auth_repository_impl.dart';
import 'features/auth/domain/usecases/auth_usecase.dart';
import 'features/auth/presentation/screens/login_page.dart';

import 'features/category/data/datasources/category_remote_datasource.dart';
import 'features/category/data/repositories/category_repository_impl.dart';
import 'features/category/domain/usecases/add_category.dart';
import 'features/category/presentation/bloc/category_bloc.dart';

import 'features/home/data/datasources/home_remote_datasource.dart';
import 'features/home/data/repositories/home_repository_impl.dart';
import 'features/home/domain/usecases/get_transaction.dart';
import 'features/home/domain/usecases/get_budget_summary.dart';
import 'features/home/presentation/bloc/home_bloc.dart';

Future<void> main() async {
  await Supabase.initialize(
    url: 'https://cfhslshehhrvotayalpb.supabase.co',
    anonKey:
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNmaHNsc2hlaGhydm90YXlhbHBiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA1Mzk0MTUsImV4cCI6MjA1NjExNTQxNX0.Ddz5JDiRJ6VJc05OKHtR4twBMWR27A28uolM_SoS8-8',
  );
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    final supabaseClient = Supabase.instance.client;

    // Transaction feature
    final transactionRemoteDataSource =
        TransactionRemoteDataSourceImpl(supabaseClient);
    final transactionRepository =
        TransactionRepositoryImpl(transactionRemoteDataSource);
    final addTransactionUseCase = AddTransaction(transactionRepository);

    // Category feature
    final categoryRemoteDataSource =
        CategoryRemoteDataSourceImpl(supabaseClient);
    final categoryRepository = CategoryRepositoryImpl(categoryRemoteDataSource);

    // Home feature
    final homeRemoteDataSource = HomeRemoteDataSourceImpl(supabaseClient);
    final homeRepository = HomeRepositoryImpl(homeRemoteDataSource);
    final getTransactionsByDate = GetTransactionsByDate(homeRepository);
    final getBudgetSummary = GetBudgetSummary(homeRepository);

    return MultiBlocProvider(
      providers: [
        BlocProvider<LoginBloc>(
          create: (context) => LoginBloc(
            loginUseCase: LoginUseCase(
              AuthRepositoryImpl(
                AuthRemoteDataSourceImpl(supabaseClient),
              ),
            ),
            remoteDataSource: AuthRemoteDataSourceImpl(supabaseClient),
          ),
        ),
        BlocProvider<CategoryBloc>(
          create: (context) => CategoryBloc(
            getCategories: GetCategories(categoryRepository),
            addCategory: AddCategory(categoryRepository),
            deleteCategory: DeleteCategory(categoryRepository),
            updateCategory: UpdateCategory(categoryRepository),
          ),
        ),
        BlocProvider<TransactionBloc>(
          create: (context) =>
              TransactionBloc(addTransactionUseCase: addTransactionUseCase),
        ),
        BlocProvider<HomeBloc>(
          create: (context) => HomeBloc(
            getTransactionsByDate: getTransactionsByDate,
            getBudgetSummary: getBudgetSummary,
          ),
        ),
        BlocProvider<PosBloc>(
          create: (context) => PosBloc(
            getPosSummary: GetPosSummary(
              PosRepositoryImpl(
                PosRemoteDataSourceImpl(Supabase.instance.client),
              ),
            ),
          ),
        ),
        BlocProvider<ReportBloc>(
          create: (context) => ReportBloc(
            ReportUseCase(
              ReportRepositoryImpl(
                ReportRemoteDatasource(Supabase.instance.client),
              ),
            ),
          ),
        ),
      ],
      child: MaterialApp(
        home: LoginPage(),
        theme: ThemeData(
          primarySwatch: Colors.blue,
          scaffoldBackgroundColor: Colors.white,
          colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue.shade400),
        ),
        debugShowCheckedModeBanner: false,
      ),
    );
  }
}
